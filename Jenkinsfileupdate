pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-login'  // Your Jenkins credential ID for DockerHub
    }

    stages {
        stage('Clone Code') {
            steps {
                echo 'Cloning the code'
                git url: 'https://github.com/Joebaho/Containerization-app-deploy.git, branch: 'main'
            }
        }
        stage('Build') {
            steps {
                echo 'This is Build Stage'
                sh 'docker build -t notes-app .'
            }
        }
        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing image to Docker Hub'
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", passwordVariable: 'DOCKERHUB_PASS', usernameVariable: 'DOCKERHUB_USER')]) {
                    sh '''
                        docker tag notes-app ${DOCKERHUB_USER}/notes-app:latest
                        echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin
                        docker push ${DOCKERHUB_USER}/notes-app:latest
                    '''
                }
            }
        }
        stage('Deployment') {
            steps {
                echo 'Deploying container'
                sh 'docker-compose down && docker-compose up -d'
            }
        }
    }
}


######################################################################


pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-login')
    }
    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Code') {
            steps {
                echo 'Cloning the code'
                git url: "https://github.com/cloudspaceacademy/containerization-deployment.git", branch: "main"
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        sh "docker build -t notes-app ."
                    } catch (Exception e) {
                        error "Failed to build Docker image: ${e.message}"
                    }
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                script {
                    try {
                        sh "docker tag notes-app ${DOCKERHUB_CREDENTIALS_USR}/notes-app:${BUILD_NUMBER}"
                        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                        sh "docker push ${DOCKERHUB_CREDENTIALS_USR}/notes-app:${BUILD_NUMBER}"
                    } catch (Exception e) {
                        error "Failed to push Docker image: ${e.message}"
                    }
                }
            }
        }
        stage('Deployment') {
            steps {
                echo 'Deploying container'
                sh "docker-compose down && docker-compose up -d"
            }
        }
        stage('Cleanup') {
            steps {
                sh "docker system prune -af"
            }
        }
    }
    post {
        always {
            sh "docker logout"
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}